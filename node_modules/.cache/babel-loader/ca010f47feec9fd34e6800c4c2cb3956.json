{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatpandey/Downloads/app/taskmanager/src/context/tasks/TaskState.js\",\n  _s = $RefreshSig$();\n// eslint-disable-next-line\nimport { useState, useEffect } from \"react\";\nimport TaskContext from \"./taskContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskState = props => {\n  _s();\n  const host = \"http://localhost:5500\";\n  const tasksInitial = [];\n  const usersInitial = [];\n  const [tasks, setTasks] = useState(tasksInitial);\n  const [users, setUsers] = useState(usersInitial);\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  useEffect(() => {\n    getUsers();\n    getTasks(); // Fetch users when the component mounts\n  }, []);\n\n  // GET all Tasks\n  const getTasks = async () => {\n    //API call\n    const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    });\n    const json = await response.json();\n    setTasks(json);\n  };\n\n  // Add a Task\n  const addTask = async (title, description, tag, duedate) => {\n    try {\n      const response = await fetch(`${host}/api/tasks/addtask`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag,\n          duedate,\n          users: selectedUsers\n        })\n      });\n      const task = await response.json();\n      setTasks([...tasks, task]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Delete a Task\n  const deleteTask = async id => {\n    // API call\n    const response = await fetch(`${host}/api/tasks/deletetask/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    const newTasks = tasks.filter(task => {\n      return task._id !== id;\n    });\n    setTasks(newTasks);\n  };\n\n  // Edit a Task\n  const editTask = async (id, title, description, tag, duedate, status) => {\n    //API call\n    const response = await fetch(`${host}/api/tasks/updatetask/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag,\n        duedate,\n        status\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    let newTasks = JSON.parse(JSON.stringify(tasks));\n\n    // Logic to edit in client\n    for (let index = 0; index < newTasks.length; index++) {\n      const element = newTasks[index];\n      if (element._id === id) {\n        newTasks[index].title = title;\n        newTasks[index].description = description;\n        newTasks[index].tag = tag;\n        newTasks[index].duedate = duedate;\n        newTasks[index].status = status;\n        break;\n      }\n    }\n    setTasks(newTasks);\n  };\n\n  // Select User\n  const selectUser = user => {\n    setSelectedUsers(prevSelectedUsers => [...prevSelectedUsers, user]);\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      users,\n      addTask,\n      deleteTask,\n      editTask,\n      getTasks,\n      getUsers,\n      selectUser,\n      selectedUsers\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskState, \"wphLQTQ44pq0E0I9nWprOoEsO94=\");\n_c = TaskState;\nexport default TaskState;\nvar _c;\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"names":["useState","useEffect","TaskContext","jsxDEV","_jsxDEV","TaskState","props","_s","host","tasksInitial","usersInitial","tasks","setTasks","users","setUsers","selectedUsers","setSelectedUsers","getUsers","getTasks","response","fetch","method","headers","localStorage","getItem","json","addTask","title","description","tag","duedate","body","JSON","stringify","task","error","console","deleteTask","id","log","newTasks","filter","_id","editTask","status","parse","index","length","element","selectUser","user","prevSelectedUsers","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shashwatpandey/Downloads/app/taskmanager/src/context/tasks/TaskState.js"],"sourcesContent":["// eslint-disable-next-line\nimport { useState,useEffect } from \"react\";\nimport TaskContext from \"./taskContext\";\n\nconst TaskState = (props) => {\n  const host = \"http://localhost:5500\";\n  const tasksInitial = [];\n  const usersInitial = [];\n\n  const [tasks, setTasks] = useState(tasksInitial);\n  const [users, setUsers] = useState(usersInitial);\n  const [selectedUsers, setSelectedUsers] = useState([])\n\n\n\n  useEffect(() => {\n    getUsers();\n    getTasks();     // Fetch users when the component mounts\n  }, []);\n\n\n\n  // GET all Tasks\n  const getTasks = async () => {\n    //API call\n    const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n    });\n    const json = await response.json();\n    setTasks(json);\n  };\n\n\n\n\n\n  // Add a Task\n  const addTask = async (title, description, tag, duedate) => {\n    try {\n      const response = await fetch(`${host}/api/tasks/addtask`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\"),\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag,\n          duedate,\n          users: selectedUsers,\n        }),\n      });\n  \n      const task = await response.json();\n      setTasks([...tasks, task]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n\n\n\n\n  // Delete a Task\n  const deleteTask = async (id) => {\n    // API call\n    const response = await fetch(`${host}/api/tasks/deletetask/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n    });\n\n    const json = response.json();\n    console.log(json);\n    const newTasks = tasks.filter((task) => {\n      return task._id !== id;\n    });\n    setTasks(newTasks);\n  };\n\n\n\n\n\n  // Edit a Task\n  const editTask = async (id, title, description, tag, duedate, status) => {\n    //API call\n    const response = await fetch(`${host}/api/tasks/updatetask/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": localStorage.getItem(\"token\"),\n      },\n      body: JSON.stringify({ title, description, tag, duedate, status}),\n    });\n\n    const json = await response.json();\n    console.log(json);\n    let newTasks = JSON.parse(JSON.stringify(tasks));\n\n    // Logic to edit in client\n    for (let index = 0; index < newTasks.length; index++) {\n      const element = newTasks[index];\n      if (element._id === id) {\n        newTasks[index].title = title;\n        newTasks[index].description = description;\n        newTasks[index].tag = tag;\n        newTasks[index].duedate = duedate;\n        newTasks[index].status = status;\n        break; \n      }\n    }\n    setTasks(newTasks);\n  };\n\n   // Select User\n   const selectUser = (user) => {\n    setSelectedUsers((prevSelectedUsers) => [...prevSelectedUsers, user]);\n  };\n  \n  return (\n    <TaskContext.Provider\n    value={{\n      tasks,\n      users,\n      addTask,\n      deleteTask,\n      editTask,\n      getTasks,\n      getUsers,\n      selectUser,\n      selectedUsers,\n    }}\n  >\n    {props.children}\n  </TaskContext.Provider>\n  \n  );\n};\n\nexport default TaskState;\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}