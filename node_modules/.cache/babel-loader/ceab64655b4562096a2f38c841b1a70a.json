{"ast":null,"code":"var _jsxFileName = \"/Users/shashwatpandey/Downloads/app/taskmanager/src/context/tasks/TaskState.js\",\n  _s = $RefreshSig$();\n// // eslint-disable-next-line\n// import { useState,useEffect } from \"react\";\n// import TaskContext from \"./taskContext\";\n\n// const TaskState = (props) => {\n//   const host = \"http://localhost:5500\";\n//   const tasksInitial = [];\n//   const usersInitial = [];\n\n//   const [tasks, setTasks] = useState(tasksInitial);\n//   const [users, setUsers] = useState(usersInitial);\n//   const [selectedUsers, setSelectedUsers] = useState([])\n\n//   useEffect(() => {\n//     getUsers();\n//     getTasks();     // Fetch users when the component mounts\n//   }, []);\n\n//   // GET all Tasks\n//   const getTasks = async () => {\n//     //API call\n//     const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"auth-token\": localStorage.getItem(\"token\"),\n//       },\n//     });\n//     const json = await response.json();\n//     setTasks(json);\n//   };\n\n//   // Add a Task\n//   const addTask = async (title, description, tag, duedate) => {\n//     //TODO : API call\n//     //API call\n//     const response = await fetch(`${host}/api/tasks/addtask`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"auth-token\": localStorage.getItem(\"token\"),\n//       },\n//       body: JSON.stringify({ title, description, tag, duedate, users: selectedUsers}),\n//     });\n\n//     const task = await response.json();\n//     setTasks(tasks.concat(task));\n//   };\n\n//   // Delete a Task\n//   const deleteTask = async (id) => {\n//     // API call\n//     const response = await fetch(`${host}/api/tasks/deletetask/${id}`, {\n//       method: \"DELETE\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"auth-token\": localStorage.getItem(\"token\"),\n//       },\n//     });\n\n//     const json = response.json();\n//     console.log(json);\n//     const newTasks = tasks.filter((task) => {\n//       return task._id !== id;\n//     });\n//     setTasks(newTasks);\n//   };\n\n//   // Edit a Task\n//   const editTask = async (id, title, description, tag, duedate, status) => {\n//     //API call\n//     const response = await fetch(`${host}/api/tasks/updatetask/${id}`, {\n//       method: \"PUT\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"auth-token\": localStorage.getItem(\"token\"),\n//       },\n//       body: JSON.stringify({ title, description, tag, duedate, status}),\n//     });\n\n//     const json = await response.json();\n//     console.log(json);\n//     let newTasks = JSON.parse(JSON.stringify(tasks));\n\n//     // Logic to edit in client\n//     for (let index = 0; index < newTasks.length; index++) {\n//       const element = newTasks[index];\n//       if (element._id === id) {\n//         newTasks[index].title = title;\n//         newTasks[index].description = description;\n//         newTasks[index].tag = tag;\n//         newTasks[index].duedate = duedate;\n//         newTasks[index].status = status;\n//         break; \n//       }\n//     }\n//     setTasks(newTasks);\n//   };\n\n//    // Select User\n//    const selectUser = (user) => {\n//     setSelectedUsers([...selectedUsers, user]); // Add the selected user to the array\n//   };\n\n//   return (\n//     <TaskContext.Provider\n//       value={{ tasks, addTask, deleteTask, editTask, getTasks, users, selectUser, selectedUsers}}\n//     >\n//       {props.children};\n//     </TaskContext.Provider>\n//   );\n// };\n\n// export default TaskState;\n\nimport { useState, useEffect } from \"react\";\nimport TaskContext from \"./taskContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskState = props => {\n  _s();\n  const host = \"http://localhost:5500\"; // Replace with your appropriate host\n  const tasksInitial = [];\n  const [tasks, setTasks] = useState(tasksInitial);\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  // GET all Tasks\n  const getTasks = async () => {\n    try {\n      const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\")\n        }\n      });\n      const json = await response.json();\n      setTasks(json);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Add a Task\n  const addTask = async (title, description, tag, duedate) => {\n    try {\n      const response = await fetch(`${host}/api/tasks/addtask`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag,\n          duedate,\n          users: selectedUsers\n        })\n      });\n      const task = await response.json();\n      setTasks([...tasks, task]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Delete a Task\n  const deleteTask = async id => {\n    try {\n      await fetch(`${host}/api/tasks/deletetask/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\")\n        }\n      });\n      setTasks(tasks.filter(task => task._id !== id));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Edit a Task\n  const editTask = async (id, title, description, tag, duedate, status) => {\n    try {\n      const response = await fetch(`${host}/api/tasks/updatetask/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          tag,\n          duedate,\n          status\n        })\n      });\n      const updatedTask = await response.json();\n      setTasks(tasks.map(task => task._id === id ? updatedTask : task));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Select User\n  const selectUser = user => {\n    setSelectedUsers(prevSelectedUsers => [...prevSelectedUsers, user]);\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      addTask,\n      deleteTask,\n      editTask,\n      getTasks,\n      selectUser,\n      selectedUsers\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskState, \"/pIOrE7Q817Ioa5oh6/zt1+yDxM=\");\n_c = TaskState;\nexport default TaskState;\nvar _c;\n$RefreshReg$(_c, \"TaskState\");","map":{"version":3,"names":["useState","useEffect","TaskContext","jsxDEV","_jsxDEV","TaskState","props","_s","host","tasksInitial","tasks","setTasks","selectedUsers","setSelectedUsers","getTasks","response","fetch","method","headers","localStorage","getItem","json","error","console","addTask","title","description","tag","duedate","body","JSON","stringify","users","task","deleteTask","id","filter","_id","editTask","status","updatedTask","map","selectUser","user","prevSelectedUsers","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shashwatpandey/Downloads/app/taskmanager/src/context/tasks/TaskState.js"],"sourcesContent":["// // eslint-disable-next-line\n// import { useState,useEffect } from \"react\";\n// import TaskContext from \"./taskContext\";\n\n// const TaskState = (props) => {\n//   const host = \"http://localhost:5500\";\n//   const tasksInitial = [];\n//   const usersInitial = [];\n\n//   const [tasks, setTasks] = useState(tasksInitial);\n//   const [users, setUsers] = useState(usersInitial);\n//   const [selectedUsers, setSelectedUsers] = useState([])\n\n\n\n//   useEffect(() => {\n//     getUsers();\n//     getTasks();     // Fetch users when the component mounts\n//   }, []);\n\n\n\n//   // GET all Tasks\n//   const getTasks = async () => {\n//     //API call\n//     const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"auth-token\": localStorage.getItem(\"token\"),\n//       },\n//     });\n//     const json = await response.json();\n//     setTasks(json);\n//   };\n\n\n\n\n\n//   // Add a Task\n//   const addTask = async (title, description, tag, duedate) => {\n//     //TODO : API call\n//     //API call\n//     const response = await fetch(`${host}/api/tasks/addtask`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"auth-token\": localStorage.getItem(\"token\"),\n//       },\n//       body: JSON.stringify({ title, description, tag, duedate, users: selectedUsers}),\n//     });\n\n//     const task = await response.json();\n//     setTasks(tasks.concat(task));\n//   };\n\n\n\n\n\n//   // Delete a Task\n//   const deleteTask = async (id) => {\n//     // API call\n//     const response = await fetch(`${host}/api/tasks/deletetask/${id}`, {\n//       method: \"DELETE\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"auth-token\": localStorage.getItem(\"token\"),\n//       },\n//     });\n\n//     const json = response.json();\n//     console.log(json);\n//     const newTasks = tasks.filter((task) => {\n//       return task._id !== id;\n//     });\n//     setTasks(newTasks);\n//   };\n\n\n\n\n\n//   // Edit a Task\n//   const editTask = async (id, title, description, tag, duedate, status) => {\n//     //API call\n//     const response = await fetch(`${host}/api/tasks/updatetask/${id}`, {\n//       method: \"PUT\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"auth-token\": localStorage.getItem(\"token\"),\n//       },\n//       body: JSON.stringify({ title, description, tag, duedate, status}),\n//     });\n\n//     const json = await response.json();\n//     console.log(json);\n//     let newTasks = JSON.parse(JSON.stringify(tasks));\n\n//     // Logic to edit in client\n//     for (let index = 0; index < newTasks.length; index++) {\n//       const element = newTasks[index];\n//       if (element._id === id) {\n//         newTasks[index].title = title;\n//         newTasks[index].description = description;\n//         newTasks[index].tag = tag;\n//         newTasks[index].duedate = duedate;\n//         newTasks[index].status = status;\n//         break; \n//       }\n//     }\n//     setTasks(newTasks);\n//   };\n\n//    // Select User\n//    const selectUser = (user) => {\n//     setSelectedUsers([...selectedUsers, user]); // Add the selected user to the array\n//   };\n\n//   return (\n//     <TaskContext.Provider\n//       value={{ tasks, addTask, deleteTask, editTask, getTasks, users, selectUser, selectedUsers}}\n//     >\n//       {props.children};\n//     </TaskContext.Provider>\n//   );\n// };\n\n// export default TaskState;\n\n\n\n\n\n\n\n\nimport { useState, useEffect } from \"react\";\nimport TaskContext from \"./taskContext\";\n\nconst TaskState = (props) => {\n  const host = \"http://localhost:5500\"; // Replace with your appropriate host\n  const tasksInitial = [];\n  const [tasks, setTasks] = useState(tasksInitial);\n  const [selectedUsers, setSelectedUsers] = useState([]);\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  // GET all Tasks\n  const getTasks = async () => {\n    try {\n      const response = await fetch(`${host}/api/tasks/fetchalltasks`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\"),\n        },\n      });\n      const json = await response.json();\n      setTasks(json);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Add a Task\n  const addTask = async (title, description, tag, duedate) => {\n    try {\n      const response = await fetch(`${host}/api/tasks/addtask`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\"),\n        },\n        body: JSON.stringify({ title, description, tag, duedate, users: selectedUsers }),\n      });\n\n      const task = await response.json();\n      setTasks([...tasks, task]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Delete a Task\n  const deleteTask = async (id) => {\n    try {\n      await fetch(`${host}/api/tasks/deletetask/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\"),\n        },\n      });\n\n      setTasks(tasks.filter((task) => task._id !== id));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Edit a Task\n  const editTask = async (id, title, description, tag, duedate, status) => {\n    try {\n      const response = await fetch(`${host}/api/tasks/updatetask/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": localStorage.getItem(\"token\"),\n        },\n        body: JSON.stringify({ title, description, tag, duedate, status }),\n      });\n\n      const updatedTask = await response.json();\n      setTasks(tasks.map((task) => (task._id === id ? updatedTask : task)));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Select User\n  const selectUser = (user) => {\n    setSelectedUsers((prevSelectedUsers) => [...prevSelectedUsers, user]);\n  };\n\n  return (\n    <TaskContext.Provider\n      value={{ tasks, addTask, deleteTask, editTask, getTasks, selectUser, selectedUsers }}\n    >\n      {props.children}\n    </TaskContext.Provider>\n  );\n};\n\nexport default TaskState;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}